package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"nq/graph/model"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	return r.Resolver.Repo.CreateUser(ctx, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id uuid.UUID, input model.UpdateUserInput) (*model.User, error) {
	return r.Resolver.Repo.UpdateUser(ctx, id, input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Resolver.Repo.DeleteUser(ctx, id)
	return err == nil, err
}

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.CreateMovieInput) (*model.Movie, error) {
	return r.Resolver.Repo.CreateMovie(ctx, input)
}

// CreateTVShow is the resolver for the createTVShow field.
func (r *mutationResolver) CreateTVShow(ctx context.Context, input model.CreateTVShowInput) (*model.TVShow, error) {
	return r.Resolver.Repo.CreateTVShow(ctx, input)
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.CreateBookInput) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: CreateBook - createBook"))
}

// CreateGame is the resolver for the createGame field.
func (r *mutationResolver) CreateGame(ctx context.Context, input model.CreateGameInput) (*model.Game, error) {
	panic(fmt.Errorf("not implemented: CreateGame - createGame"))
}

// CreateMusicAlbum is the resolver for the createMusicAlbum field.
func (r *mutationResolver) CreateMusicAlbum(ctx context.Context, input model.CreateMusicAlbumInput) (*model.MusicAlbum, error) {
	panic(fmt.Errorf("not implemented: CreateMusicAlbum - createMusicAlbum"))
}

// RateMedia is the resolver for the rateMedia field.
func (r *mutationResolver) RateMedia(ctx context.Context, userID uuid.UUID, mediaID uuid.UUID, score float64) (*model.Rating, error) {
	panic(fmt.Errorf("not implemented: RateMedia - rateMedia"))
}

// AddToFavorites is the resolver for the addToFavorites field.
func (r *mutationResolver) AddToFavorites(ctx context.Context, userID uuid.UUID, mediaID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: AddToFavorites - addToFavorites"))
}

// CreateActivity is the resolver for the createActivity field.
func (r *mutationResolver) CreateActivity(ctx context.Context, input model.CreateActivityInput) (*model.UserActivity, error) {
	panic(fmt.Errorf("not implemented: CreateActivity - createActivity"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	return r.Resolver.Repo.GetUserByID(ctx, id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Repo.GetAllUsers(ctx)
}

// Media is the resolver for the media field.
func (r *queryResolver) Media(ctx context.Context, id uuid.UUID) (model.Media, error) {
	return r.Resolver.Repo.GetMediaByID(ctx, id)
}

// AllMedia is the resolver for the allMedia field.
func (r *queryResolver) AllMedia(ctx context.Context) ([]model.Media, error) {
	panic(fmt.Errorf("not implemented: AllMedia - allMedia"))
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	return r.Resolver.Repo.GetAllMovies(ctx)
}

// TvShows is the resolver for the tvShows field.
func (r *queryResolver) TvShows(ctx context.Context) ([]*model.TVShow, error) {
	return r.Resolver.Repo.GetAllTVShows(ctx)
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context) ([]*model.Game, error) {
	panic(fmt.Errorf("not implemented: Games - games"))
}

// MusicAlbums is the resolver for the musicAlbums field.
func (r *queryResolver) MusicAlbums(ctx context.Context) ([]*model.MusicAlbum, error) {
	panic(fmt.Errorf("not implemented: MusicAlbums - musicAlbums"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
