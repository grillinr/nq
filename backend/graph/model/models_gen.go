// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/google/uuid"
)

type Media interface {
	IsMedia()
	GetID() uuid.UUID
	GetTitle() string
	GetReleaseDate() *string
	GetDescription() *string
	GetCoverURL() *string
	GetCreators() []*Creator
	GetPlatforms() []*Platform
	GetTags() []*Tag
	GetRatings() []*Rating
	GetAverageRating() *float64
}

type ActivityStatus struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type Book struct {
	ID            uuid.UUID   `json:"id"`
	Title         string      `json:"title"`
	ReleaseDate   *string     `json:"releaseDate,omitempty"`
	Description   *string     `json:"description,omitempty"`
	CoverURL      *string     `json:"coverUrl,omitempty"`
	Creators      []*Creator  `json:"creators"`
	Platforms     []*Platform `json:"platforms"`
	Tags          []*Tag      `json:"tags"`
	Ratings       []*Rating   `json:"ratings"`
	AverageRating *float64    `json:"averageRating,omitempty"`
	Pages         *int32      `json:"pages,omitempty"`
	Isbn          *string     `json:"isbn,omitempty"`
	Publisher     *string     `json:"publisher,omitempty"`
}

func (Book) IsMedia()                     {}
func (this Book) GetID() uuid.UUID        { return this.ID }
func (this Book) GetTitle() string        { return this.Title }
func (this Book) GetReleaseDate() *string { return this.ReleaseDate }
func (this Book) GetDescription() *string { return this.Description }
func (this Book) GetCoverURL() *string    { return this.CoverURL }
func (this Book) GetCreators() []*Creator {
	if this.Creators == nil {
		return nil
	}
	interfaceSlice := make([]*Creator, 0, len(this.Creators))
	for _, concrete := range this.Creators {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Book) GetPlatforms() []*Platform {
	if this.Platforms == nil {
		return nil
	}
	interfaceSlice := make([]*Platform, 0, len(this.Platforms))
	for _, concrete := range this.Platforms {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Book) GetTags() []*Tag {
	if this.Tags == nil {
		return nil
	}
	interfaceSlice := make([]*Tag, 0, len(this.Tags))
	for _, concrete := range this.Tags {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Book) GetRatings() []*Rating {
	if this.Ratings == nil {
		return nil
	}
	interfaceSlice := make([]*Rating, 0, len(this.Ratings))
	for _, concrete := range this.Ratings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Book) GetAverageRating() *float64 { return this.AverageRating }

type CreateActivityInput struct {
	UserID     uuid.UUID `json:"userId"`
	MediaID    uuid.UUID `json:"mediaId"`
	StatusID   int32     `json:"statusId"`
	Rating     *float64  `json:"rating,omitempty"`
	Review     *string   `json:"review,omitempty"`
	StartedAt  *string   `json:"startedAt,omitempty"`
	FinishedAt *string   `json:"finishedAt,omitempty"`
}

type CreateBookInput struct {
	Title       string  `json:"title"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Description *string `json:"description,omitempty"`
	CoverURL    *string `json:"coverUrl,omitempty"`
	Pages       *int32  `json:"pages,omitempty"`
	Isbn        *string `json:"isbn,omitempty"`
	Publisher   *string `json:"publisher,omitempty"`
}

type CreateGameInput struct {
	Title       string   `json:"title"`
	ReleaseDate *string  `json:"releaseDate,omitempty"`
	Description *string  `json:"description,omitempty"`
	CoverURL    *string  `json:"coverUrl,omitempty"`
	Genre       []string `json:"genre"`
	EsrbRating  *string  `json:"esrbRating,omitempty"`
	Multiplayer *bool    `json:"multiplayer,omitempty"`
}

type CreateMovieInput struct {
	Title       string  `json:"title"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Description *string `json:"description,omitempty"`
	CoverURL    *string `json:"coverUrl,omitempty"`
	Runtime     *int32  `json:"runtime,omitempty"`
	Budget      *int32  `json:"budget,omitempty"`
	BoxOffice   *int32  `json:"boxOffice,omitempty"`
}

type CreateMusicAlbumInput struct {
	Title       string  `json:"title"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Description *string `json:"description,omitempty"`
	CoverURL    *string `json:"coverUrl,omitempty"`
	TrackCount  *int32  `json:"trackCount,omitempty"`
	Duration    *int32  `json:"duration,omitempty"`
	Label       *string `json:"label,omitempty"`
}

type CreateTVShowInput struct {
	Title       string  `json:"title"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Description *string `json:"description,omitempty"`
	CoverURL    *string `json:"coverUrl,omitempty"`
	Seasons     *int32  `json:"seasons,omitempty"`
	Episodes    *int32  `json:"episodes,omitempty"`
	Status      *string `json:"status,omitempty"`
}

type CreateUserInput struct {
	Name         string  `json:"name"`
	Email        string  `json:"email"`
	AuthProvider *string `json:"authProvider,omitempty"`
}

type Creator struct {
	ID         uuid.UUID    `json:"id"`
	Name       string       `json:"name"`
	Role       *CreatorRole `json:"role"`
	MediaItems []Media      `json:"mediaItems"`
}

type CreatorRole struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type Game struct {
	ID            uuid.UUID   `json:"id"`
	Title         string      `json:"title"`
	ReleaseDate   *string     `json:"releaseDate,omitempty"`
	Description   *string     `json:"description,omitempty"`
	CoverURL      *string     `json:"coverUrl,omitempty"`
	Creators      []*Creator  `json:"creators"`
	Platforms     []*Platform `json:"platforms"`
	Tags          []*Tag      `json:"tags"`
	Ratings       []*Rating   `json:"ratings"`
	AverageRating *float64    `json:"averageRating,omitempty"`
	Genre         []string    `json:"genre"`
	EsrbRating    *string     `json:"esrbRating,omitempty"`
	Multiplayer   *bool       `json:"multiplayer,omitempty"`
}

func (Game) IsMedia()                     {}
func (this Game) GetID() uuid.UUID        { return this.ID }
func (this Game) GetTitle() string        { return this.Title }
func (this Game) GetReleaseDate() *string { return this.ReleaseDate }
func (this Game) GetDescription() *string { return this.Description }
func (this Game) GetCoverURL() *string    { return this.CoverURL }
func (this Game) GetCreators() []*Creator {
	if this.Creators == nil {
		return nil
	}
	interfaceSlice := make([]*Creator, 0, len(this.Creators))
	for _, concrete := range this.Creators {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Game) GetPlatforms() []*Platform {
	if this.Platforms == nil {
		return nil
	}
	interfaceSlice := make([]*Platform, 0, len(this.Platforms))
	for _, concrete := range this.Platforms {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Game) GetTags() []*Tag {
	if this.Tags == nil {
		return nil
	}
	interfaceSlice := make([]*Tag, 0, len(this.Tags))
	for _, concrete := range this.Tags {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Game) GetRatings() []*Rating {
	if this.Ratings == nil {
		return nil
	}
	interfaceSlice := make([]*Rating, 0, len(this.Ratings))
	for _, concrete := range this.Ratings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Game) GetAverageRating() *float64 { return this.AverageRating }

type Movie struct {
	ID            uuid.UUID   `json:"id"`
	Title         string      `json:"title"`
	ReleaseDate   *string     `json:"releaseDate,omitempty"`
	Description   *string     `json:"description,omitempty"`
	CoverURL      *string     `json:"coverUrl,omitempty"`
	Creators      []*Creator  `json:"creators"`
	Platforms     []*Platform `json:"platforms"`
	Tags          []*Tag      `json:"tags"`
	Ratings       []*Rating   `json:"ratings"`
	AverageRating *float64    `json:"averageRating,omitempty"`
	Runtime       *int32      `json:"runtime,omitempty"`
	Budget        *int32      `json:"budget,omitempty"`
	BoxOffice     *int32      `json:"boxOffice,omitempty"`
}

func (Movie) IsMedia()                     {}
func (this Movie) GetID() uuid.UUID        { return this.ID }
func (this Movie) GetTitle() string        { return this.Title }
func (this Movie) GetReleaseDate() *string { return this.ReleaseDate }
func (this Movie) GetDescription() *string { return this.Description }
func (this Movie) GetCoverURL() *string    { return this.CoverURL }
func (this Movie) GetCreators() []*Creator {
	if this.Creators == nil {
		return nil
	}
	interfaceSlice := make([]*Creator, 0, len(this.Creators))
	for _, concrete := range this.Creators {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Movie) GetPlatforms() []*Platform {
	if this.Platforms == nil {
		return nil
	}
	interfaceSlice := make([]*Platform, 0, len(this.Platforms))
	for _, concrete := range this.Platforms {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Movie) GetTags() []*Tag {
	if this.Tags == nil {
		return nil
	}
	interfaceSlice := make([]*Tag, 0, len(this.Tags))
	for _, concrete := range this.Tags {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Movie) GetRatings() []*Rating {
	if this.Ratings == nil {
		return nil
	}
	interfaceSlice := make([]*Rating, 0, len(this.Ratings))
	for _, concrete := range this.Ratings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this Movie) GetAverageRating() *float64 { return this.AverageRating }

type MusicAlbum struct {
	ID            uuid.UUID   `json:"id"`
	Title         string      `json:"title"`
	ReleaseDate   *string     `json:"releaseDate,omitempty"`
	Description   *string     `json:"description,omitempty"`
	CoverURL      *string     `json:"coverUrl,omitempty"`
	Creators      []*Creator  `json:"creators"`
	Platforms     []*Platform `json:"platforms"`
	Tags          []*Tag      `json:"tags"`
	Ratings       []*Rating   `json:"ratings"`
	AverageRating *float64    `json:"averageRating,omitempty"`
	TrackCount    *int32      `json:"trackCount,omitempty"`
	Duration      *int32      `json:"duration,omitempty"`
	Label         *string     `json:"label,omitempty"`
}

func (MusicAlbum) IsMedia()                     {}
func (this MusicAlbum) GetID() uuid.UUID        { return this.ID }
func (this MusicAlbum) GetTitle() string        { return this.Title }
func (this MusicAlbum) GetReleaseDate() *string { return this.ReleaseDate }
func (this MusicAlbum) GetDescription() *string { return this.Description }
func (this MusicAlbum) GetCoverURL() *string    { return this.CoverURL }
func (this MusicAlbum) GetCreators() []*Creator {
	if this.Creators == nil {
		return nil
	}
	interfaceSlice := make([]*Creator, 0, len(this.Creators))
	for _, concrete := range this.Creators {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MusicAlbum) GetPlatforms() []*Platform {
	if this.Platforms == nil {
		return nil
	}
	interfaceSlice := make([]*Platform, 0, len(this.Platforms))
	for _, concrete := range this.Platforms {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MusicAlbum) GetTags() []*Tag {
	if this.Tags == nil {
		return nil
	}
	interfaceSlice := make([]*Tag, 0, len(this.Tags))
	for _, concrete := range this.Tags {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MusicAlbum) GetRatings() []*Rating {
	if this.Ratings == nil {
		return nil
	}
	interfaceSlice := make([]*Rating, 0, len(this.Ratings))
	for _, concrete := range this.Ratings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MusicAlbum) GetAverageRating() *float64 { return this.AverageRating }

type Mutation struct {
}

type Platform struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	BaseURL    *string   `json:"baseUrl,omitempty"`
	MediaItems []Media   `json:"mediaItems"`
}

type Query struct {
}

type Rating struct {
	User    *User   `json:"user"`
	Media   Media   `json:"media"`
	Score   float64 `json:"score"`
	RatedAt string  `json:"ratedAt"`
}

type Recommendation struct {
	ID          uuid.UUID `json:"id"`
	User        *User     `json:"user"`
	Media       Media     `json:"media"`
	Recommender *User     `json:"recommender,omitempty"`
	Source      *string   `json:"source,omitempty"`
	Score       *float64  `json:"score,omitempty"`
}

type TVShow struct {
	ID            uuid.UUID   `json:"id"`
	Title         string      `json:"title"`
	ReleaseDate   *string     `json:"releaseDate,omitempty"`
	Description   *string     `json:"description,omitempty"`
	CoverURL      *string     `json:"coverUrl,omitempty"`
	Creators      []*Creator  `json:"creators"`
	Platforms     []*Platform `json:"platforms"`
	Tags          []*Tag      `json:"tags"`
	Ratings       []*Rating   `json:"ratings"`
	AverageRating *float64    `json:"averageRating,omitempty"`
	Seasons       *int32      `json:"seasons,omitempty"`
	Episodes      *int32      `json:"episodes,omitempty"`
	Status        *string     `json:"status,omitempty"`
}

func (TVShow) IsMedia()                     {}
func (this TVShow) GetID() uuid.UUID        { return this.ID }
func (this TVShow) GetTitle() string        { return this.Title }
func (this TVShow) GetReleaseDate() *string { return this.ReleaseDate }
func (this TVShow) GetDescription() *string { return this.Description }
func (this TVShow) GetCoverURL() *string    { return this.CoverURL }
func (this TVShow) GetCreators() []*Creator {
	if this.Creators == nil {
		return nil
	}
	interfaceSlice := make([]*Creator, 0, len(this.Creators))
	for _, concrete := range this.Creators {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this TVShow) GetPlatforms() []*Platform {
	if this.Platforms == nil {
		return nil
	}
	interfaceSlice := make([]*Platform, 0, len(this.Platforms))
	for _, concrete := range this.Platforms {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this TVShow) GetTags() []*Tag {
	if this.Tags == nil {
		return nil
	}
	interfaceSlice := make([]*Tag, 0, len(this.Tags))
	for _, concrete := range this.Tags {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this TVShow) GetRatings() []*Rating {
	if this.Ratings == nil {
		return nil
	}
	interfaceSlice := make([]*Rating, 0, len(this.Ratings))
	for _, concrete := range this.Ratings {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this TVShow) GetAverageRating() *float64 { return this.AverageRating }

type Tag struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Type string    `json:"type"`
}

type UpdateUserInput struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type User struct {
	ID              uuid.UUID         `json:"id"`
	Name            string            `json:"name"`
	Email           string            `json:"email"`
	AuthProvider    *string           `json:"authProvider,omitempty"`
	Activities      []*UserActivity   `json:"activities"`
	Ratings         []*Rating         `json:"ratings"`
	Favorites       []Media           `json:"favorites"`
	Recommendations []*Recommendation `json:"recommendations"`
}

type UserActivity struct {
	ID             uuid.UUID       `json:"id"`
	User           *User           `json:"user"`
	Media          Media           `json:"media"`
	Status         *ActivityStatus `json:"status"`
	Rating         *float64        `json:"rating,omitempty"`
	Review         *string         `json:"review,omitempty"`
	StartedAt      *string         `json:"startedAt,omitempty"`
	FinishedAt     *string         `json:"finishedAt,omitempty"`
	SourcePlatform *Platform       `json:"sourcePlatform,omitempty"`
}
